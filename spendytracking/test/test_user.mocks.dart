// Mocks generated by Mockito 5.4.4 from annotations
// in spendytracking/test/test_user.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:firebase_auth/firebase_auth.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i12;
import 'package:google_sign_in/google_sign_in.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:spendytracking/data/models/user_model.dart' as _i7;
import 'package:spendytracking/data/repositories/auth_repository.dart' as _i3;
import 'package:spendytracking/domain/usecases/auth_usecase.dart' as _i2;
import 'package:spendytracking/presentation/login/bloc/login_bloc.dart' as _i8;
import 'package:spendytracking/presentation/login/bloc/login_event.dart'
    as _i11;
import 'package:spendytracking/presentation/login/bloc/login_state.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthUseCase_0 extends _i1.SmartFake implements _i2.AuthUseCase {
  _FakeAuthUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_1 extends _i1.SmartFake
    implements _i3.AuthRepository {
  _FakeAuthRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.GoogleSignInAuthentication?> login() => (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
        ),
        returnValue: _i4.Future<_i5.GoogleSignInAuthentication?>.value(),
      ) as _i4.Future<_i5.GoogleSignInAuthentication?>);

  @override
  _i4.Future<_i6.User?> getUserFromGoogleAuth(
          _i5.GoogleSignInAuthentication? auth) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserFromGoogleAuth,
          [auth],
        ),
        returnValue: _i4.Future<_i6.User?>.value(),
      ) as _i4.Future<_i6.User?>);

  @override
  _i4.Future<dynamic> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<void> addUserToFirestore(_i7.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #addUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addUserLocal(String? id) => (super.noSuchMethod(
        Invocation.method(
          #addUserLocal,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getIdUserLocal() => (super.noSuchMethod(
        Invocation.method(
          #getIdUserLocal,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}

/// A class which mocks [LoginBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginBloc extends _i1.Mock implements _i8.LoginBloc {
  MockLoginBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthUseCase get authUseCase => (super.noSuchMethod(
        Invocation.getter(#authUseCase),
        returnValue: _FakeAuthUseCase_0(
          this,
          Invocation.getter(#authUseCase),
        ),
      ) as _i2.AuthUseCase);

  @override
  _i9.LoginState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i10.dummyValue<_i9.LoginState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.LoginState);

  @override
  _i4.Stream<_i9.LoginState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i9.LoginState>.empty(),
      ) as _i4.Stream<_i9.LoginState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void onLoginGetUser(
    _i11.LoginEventGetUser? event,
    _i12.Emitter<_i9.LoginState>? emit,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onLoginGetUser,
          [
            event,
            emit,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(_i11.LoginEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.LoginEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.LoginState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.LoginEvent>(
    _i12.EventHandler<E, _i9.LoginState>? handler, {
    _i12.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i12.Transition<_i11.LoginEvent, _i9.LoginState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i12.Change<_i9.LoginState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUseCase extends _i1.Mock implements _i2.AuthUseCase {
  MockAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i3.AuthRepository);

  @override
  set userModel(_i7.UserModel? _userModel) => super.noSuchMethod(
        Invocation.setter(
          #userModel,
          _userModel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String?> login() => (super.noSuchMethod(
        Invocation.method(
          #stateUserLogin,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> addUserToFirestore() => (super.noSuchMethod(
        Invocation.method(
          #addUser,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> getUserLocal() => (super.noSuchMethod(
        Invocation.method(
          #getUserLocal,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> setUserIdLocal() => (super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}
